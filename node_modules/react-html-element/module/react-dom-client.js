var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as ReactDOM from 'react-dom';
const createRootFake = (container) => {
    const newRoot = {
        render: (element) => {
            ReactDOM.render(element, container);
        },
        unmount: () => {
            ReactDOM.unmountComponentAtNode(container);
        },
    };
    return newRoot;
};
let checkedFor18 = false;
let MaybeReactDOM18;
// eslint-disable-next-line import/prefer-default-export
export const getCreateRoot = () => __awaiter(void 0, void 0, void 0, function* () {
    if (!checkedFor18) {
        try {
            // eslint-disable-next-line global-require,@typescript-eslint/no-var-requires
            MaybeReactDOM18 = (yield require('react-dom/client'));
        }
        catch (_a) {
            MaybeReactDOM18 = ReactDOM;
        }
        checkedFor18 = true;
    }
    const { createRoot = createRootFake } = MaybeReactDOM18;
    return createRoot;
});
